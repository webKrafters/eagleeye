{"version":3,"file":"component---src-pages-concepts-provider-tsx-0afe37d26544a4a25b20.js","mappings":"8JAmBA,UAd8DA,IAAA,IAAC,UAAEC,GAAWD,EAAA,OACxEE,EAAAA,cAAA,WAASD,UAAa,yBAAyBA,KAC3CC,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAI,yBACJA,EAAAA,cAAA,WACIA,EAAAA,cAACC,EAAAA,EAAS,KAAC,8EAA2ED,EAAAA,cAAA,YAAM,iBAAoB,iDAA8CA,EAAAA,cAAA,YAAM,YAAe,QAAKA,EAAAA,cAAA,YAAM,SAAY,2BAAwBA,EAAAA,cAAA,cAAQ,KAAU,oBAAiBA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,sBAAqBH,EAAAA,cAAA,YAAM,aAAwB,QAAKA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,qBAAoBH,EAAAA,cAAA,YAAM,YAAuB,KACpYA,EAAAA,cAACC,EAAAA,EAAS,KAAC,uEAAoED,EAAAA,cAAA,YAAM,OAAU,4BAAyBA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,mCAAkC,kBAAuB,YAC5LH,EAAAA,cAACC,EAAAA,EAAS,KAAC,kBAAeD,EAAAA,cAAA,YAAM,SAAY,sIAAmIA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,mCAAkC,kBAAuB,cAGrP,C,sECRd,MAAMF,GAA0CG,EAAAA,EAAAA,aAE9C,CAAAN,EAAoCO,KAAG,IAAtC,SAAEC,EAAQ,UAAEP,KAAcQ,GAAOT,EAAA,OAChCE,EAAAA,cAAA,MAAAQ,OAAAC,OAAA,CACIC,KAAK,aACAH,EAAK,CACVR,UAAa,aAAYA,EAAa,IAAIA,IAAe,IACzDM,IAAMA,IAEJM,EAAAA,SAASC,IAAKN,GAAUO,GAAKA,IAC7B,IAGVZ,EAAUa,YAAc,YAExB,O","sources":["webpack://eagleeye-dev/./src/pages/concepts/provider.tsx","webpack://eagleeye-dev/./src/partials/paragraph/component.tsx"],"sourcesContent":["import React from 'react';\n\nimport Anchor from '../../partials/anchor';\nimport Paragraph from '../../partials/paragraph';\n\nconst ConceptProviderPage : React.FC<{className? : string}> = ({ className }) => (\n    <article className={ `concept-provider-page ${ className }` }>\n        <h1>Provider</h1>\n        <div>\n            <h3>What is the Provider?</h3>\n            <div>\n                <Paragraph>The Provider component is a property of the Eagle Eye context object. As a <code>React.Context</code> API based provider, it accepts the customary <code>children</code> and <code>value</code> props. It also accepts <strong>2</strong> optional props: <Anchor to=\"/concepts/prehooks\"><code>prehooks</code></Anchor> and <Anchor to=\"/concepts/storage\"><code>storage</code></Anchor>.</Paragraph>\n                <Paragraph>External direct access to the context store may be obtained via the <code>ref</code> attribute. Please see a <Anchor to=\"/getting-started#provider-usage\">Provider Usage</Anchor> sample.</Paragraph>\n                <Paragraph>Routinely, the <code>value</code>  prop is initialized with the full initial state. It may only be updated with parts of the state which are changing. Please see a <Anchor to=\"/getting-started#provider-usage\">Provider Usage</Anchor> sample.</Paragraph>\n            </div>\n        </div>\n    </article>\n);\n\nexport default ConceptProviderPage;","import type { NamedExoticComponent } from 'react';\n\nimport React, { Children, forwardRef } from 'react';\n\nimport './style.scss';\n\nexport type Props = JSX.IntrinsicElements[ \"div\" ];\n\nconst Paragraph : NamedExoticComponent<Props> = forwardRef<\n    HTMLDivElement, Props\n>(({ children, className, ...props }, ref ) => (\n    <div\n        role=\"paragraph\"\n        { ...props }\n        className={ `paragraph${ className ? ` ${ className }` : '' }` }\n        ref={ ref }\n    >\n        { Children.map( children, c => c ) }\n    </div>\n));\n\nParagraph.displayName = 'Paragraph';\n\nexport default Paragraph;"],"names":["_ref","className","React","Paragraph","Anchor","to","forwardRef","ref","children","props","Object","assign","role","Children","map","c","displayName"],"sourceRoot":""}