{"version":3,"file":"component---src-pages-concepts-store-resetstate-tsx-65662b0f0df7ed0626ea.js","mappings":"+JAuBA,UAjBqEA,IAAA,IAAC,UAAEC,GAAWD,EAAA,OAC/EE,EAAAA,cAAA,WAASD,UAAa,iCAAiCA,KACnDC,EAAAA,cAAA,UAAIA,EAAAA,cAAA,YAAM,oBAAuB,UACjCA,EAAAA,cAAA,SACIA,EAAAA,cAAA,cAAQ,cACRA,EAAAA,cAAA,WAAQ,6CAEZA,EAAAA,cAAA,UAAI,6CACJA,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,SAAG,qEACbA,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,SAAG,yFACbA,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,SAAG,qCAAkCA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,iDAAgDH,EAAAA,cAAA,YAAM,YAAuB,6CACvIA,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,SAAG,0DAAuDA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,0BAAyB,gBAAqB,oCAC7HH,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,SAAG,kEAA+DA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,iDAAgDH,EAAAA,cAAA,YAAM,YAAuB,uCAAoCA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,0BAAyB,gBAAqB,MACjQH,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,SAAG,iDAA8CA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,0BAAyB,gBAAqB,2CAC9G,C,uEChBd,MAAMC,EAAeN,IAAA,IAAC,UAAEC,GAEvBD,EAAA,MACI,aAAYC,EAAa,IAAIA,IAAe,GAAK,EAGhDE,EAAgDI,IAAmB,IAAlB,SAAEC,GAAUD,EAC/D,MAAME,GAAQC,EAAAA,EAAAA,UAAQ,SAAAC,EAAA,MAAO,CACzBV,UAAWK,EAAcE,EAASC,OAClCG,KAAyB,QAArBD,EAAEH,EAASC,MAAMG,YAAI,IAAAD,EAAAA,EAAI,WAChC,GAAG,CACAH,EAASC,MAAMR,UACfO,EAASC,MAAMG,OAEnB,OAAOC,EAAAA,EAAAA,cAAcL,EAAUC,EAAO,EAG1CN,EAASW,YAAc,WAEvB,O","sources":["webpack://eagleeye-dev/./src/pages/concepts/store/resetstate.tsx","webpack://eagleeye-dev/./src/partials/list-item/component.tsx"],"sourcesContent":["import React from 'react';\n\nimport Anchor from '../../../partials/anchor';\n\nimport ListItem from '../../../partials/list-item';\n\nconst ConceptStoreResetStatePage : React.FC<{className? : string}> = ({ className }) => (\n    <article className={ `concept-store-resetstate-page ${ className }` }>\n        <h1><code>store.resetState</code> Usage</h1>\n        <p>\n            <strong>Signature:</strong>\n            <pre>{ `(propertyPaths?: Array<string>) => void;` }</pre>\n        </p>\n        <h3>What does the store resetState method do?</h3>\n        <ListItem><p>Resets slices of state to their initial state values as desired.</p></ListItem>\n        <ListItem><p>Accepts an array of property paths referencing the desired slices of state to reset.</p></ListItem>\n        <ListItem><p>Performs a total state reset when <Anchor to=\"/concepts/property-path#fullstate-selectorkey\"><code>@@STATE</code></Anchor> is present in the property paths array.</p></ListItem>\n        <ListItem><p>Resets state slices referenced by the calling client's <Anchor to=\"/concepts/selector-map\">selector map</Anchor> when invoked with 0 arguments.</p></ListItem>\n        <ListItem><p>Performs a total state reset when invoked with 0 arguments and <Anchor to=\"/concepts/property-path#fullstate-selectorkey\"><code>@@STATE</code></Anchor> is present in the calling client's <Anchor to=\"/concepts/selector-map\">selector map</Anchor>.</p></ListItem>\n        <ListItem><p>Performs no state reset when a client with no <Anchor to=\"/concepts/selector-map\">selector map</Anchor> invokes this method with 0 arguments.</p></ListItem>\n    </article>\n);\n\nexport default ConceptStoreResetStatePage;","import React, { cloneElement, useMemo } from 'react';\n\nimport './style.scss';\n\nconst getClassName = ({ className } : {\n    className? : string\n}) => (\n    `list-item${ className ? ` ${ className }` : '' }`\n);\n\nconst ListItem : React.FC<{children : JSX.Element}> = ({ children }) => {\n    const props = useMemo(() => ({\n        className: getClassName( children.props ),\n        role: children.props.role ?? 'listitem'\n    }), [\n        children.props.className,\n        children.props.role\n    ]);\n    return cloneElement( children, props );\n};\n\nListItem.displayName = 'ListItem';\n\nexport default ListItem;"],"names":["_ref","className","React","ListItem","Anchor","to","getClassName","_ref2","children","props","useMemo","_children$props$role","role","cloneElement","displayName"],"sourceRoot":""}