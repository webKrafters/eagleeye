{"version":3,"file":"component---src-pages-concepts-store-setstate-tags-set-tsx-e5574ac16588a49196ac.js","mappings":"sNAiEA,UApB6DA,IAAA,IAAC,UAAEC,GAAWD,EAAA,OACvEE,EAAAA,cAAA,WAASD,UAAa,6CAA6CA,KAC/DC,EAAAA,cAAA,UAAIA,EAAAA,cAAA,YAAS,kBAAwB,oBACrCA,EAAAA,cAAA,cAAQ,aACRA,EAAAA,cAAA,WAlBP,mHAmBOA,EAAAA,cAAA,cAAQ,aACRA,EAAAA,cAAA,WACAA,EAAAA,cAAA,UAAQC,MAAO,CAAEC,MAAO,UAAW,wBAGnCF,EAAAA,cAAA,WAjBP,kKAkBOA,EAAAA,cAACG,EAAAA,EAAS,KAAC,6CACXH,EAAAA,cAACG,EAAAA,EAAS,KAAC,+HACXH,EAAAA,cAACG,EAAAA,EAAS,KAAC,iBAAcH,EAAAA,cAAA,cAAQA,EAAAA,cAACI,EAAAA,EAAM,CAACC,GAAG,yCAAwC,cAA2B,mFAC/GL,EAAAA,cAACG,EAAAA,EAAS,KAAC,sDAAmDH,EAAAA,cAAA,YAAM,aAAgB,wDACpFA,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAACM,EAAAA,EAAS,KAhDjB,8/BAiDa,EAKP,MAAMC,EAAgBA,IACzBP,EAAAA,cAAA,aAASQ,EAAAA,EAASC,MAAO,U,sEC5D7B,MAAMN,GAA0CO,EAAAA,EAAAA,aAE9C,CAAAZ,EAAoCa,KAAG,IAAtC,SAAEC,EAAQ,UAAEb,KAAcc,GAAOf,EAAA,OAChCE,EAAAA,cAAA,MAAAc,OAAAC,OAAA,CACIC,KAAK,aACAH,EAAK,CACVd,UAAa,aAAYA,EAAa,IAAIA,IAAe,IACzDY,IAAMA,IAEJM,EAAAA,SAASC,IAAKN,GAAUO,GAAKA,IAC7B,IAGVhB,EAAUiB,YAAc,YAExB,O","sources":["webpack://eagleeye-dev/./src/pages/concepts/store/setstate/tags/set.tsx","webpack://eagleeye-dev/./src/partials/paragraph/component.tsx"],"sourcesContent":["import type { HeadFC } from 'gatsby';\n\nimport type { PageProps } from '../../../../../page-context';\n\nimport React from 'react';\n\nimport metadata from '../../../../../../gatsby-config/metadata';\n\nimport Anchor from '../../../../../partials/anchor';\nimport CodeBlock from '../../../../../partials/code-block';\nimport Paragraph from '../../../../../partials/paragraph';\n\nconst SAMPLE =\n`import { SET_TAG } from '@webkrafters/react-observable-context'; // SET_TAG = \"@@SET\"\n\nconst state = {\n    a: { b: [{ x: 7, y: 8, z: 9 }, { x: 17, y: 18, z: 19 }] },\n    j: 10\n};\n\nstore.setState({ [ SET_TAG ]: currentValue => ({ ...currentValue, a: 'Demo', j: 17 }) }) // rewrites state to { ...state, a: 'Demo', j: 17 };\n\nstore.setState({ a: { [ SET_TAG ]: currentValue => ({ ...currentValue, message: 'Testing...' }) } }) // rewrites state.a to { ...state, message: 'Testing...' }\n\n/* rewrites state.a.b[1] to { x: 97, y: 98, z: 99 }; leaving state.a.b = [{ x: 7, y: 8, z: 9 }, { x: 97, y: 98, z: 99 }] */\nstore.setState({ a: { b: [ state.a.b[ 0 ], { [ SET_TAG ]: currentValue => ({ ...currentValue, x: 97, y: 98, z: 99 }) } ] } })\n\n/* rewrites state.a.b[1] to { x: 97, y: 98, z: 99 }; leaving state.a.b = [{ x: 7, y: 8, z: 9 }, { x: 97, y: 98, z: 99 }] using indexing (RECOMMENDED) */\nstore.setState({ a: { b: { 1: { [ SET_TAG ]: currentValue => ({ ...currentValue, x: 97, y: 98, z: 99 }) } } } });`\n\nconst SAMPLE_CALL1 =\n`store.setState({\n    stateKey0: {\n        '@@SET': <any> // replaces \\`state.stateKey0\\` with value\n    }\n});`;\n\nconst SAMPLE_CALL2 =\n`store.setState({\n    stateKey0: {\n        // replaces \\`state.stateKey0\\` with return value\n        '@@SET': ( currentStateKey0: <any> ) => <any>\n    }\n});`;\n\nconst ConceptStoreSetStateSetTagPage : React.FC<PageProps> = ({ className }) => (\n    <article className={ `concept-store-setstate-set-tag-usage-page ${ className }` }>\n        <h1><code>{ `store.setState` }</code> @@SET Tag Usage</h1>\n        <strong>Sample 1:</strong>\n        <pre>{ SAMPLE_CALL1 }</pre>\n        <strong>Sample 2:</strong>\n        <br />\n        <strong style={{ color: 'green' }}>\n            Using Computed value\n        </strong>\n        <pre>{ SAMPLE_CALL2 }</pre>\n        <Paragraph>This tag is for handling edge cases only.</Paragraph>\n        <Paragraph>Please use sparingly. In most cases, store.setState with or without any of the other tags is sufficient and most efficient.</Paragraph>\n        <Paragraph>This and the '<strong><Anchor to=\"/concepts/store/setstate/tags/replace\">@@REPLACE</Anchor></strong>' tags are functionally equivalent when used with a replacement value argument.</Paragraph>\n        <Paragraph>Be aware that the compute function argument may be <code>undefined</code> for properties which do not yet exist in the state.</Paragraph>\n        <h4>Example:</h4>\n        <CodeBlock>{ SAMPLE }</CodeBlock>\n    </article>\n);\n\nexport default ConceptStoreSetStateSetTagPage;\n\nexport const Head : HeadFC = () => (\n    <title>{ metadata.title }: @@SET</title>\n);\n","import type { NamedExoticComponent } from 'react';\n\nimport React, { Children, forwardRef } from 'react';\n\nimport './style.scss';\n\nexport type Props = JSX.IntrinsicElements[ \"div\" ];\n\nconst Paragraph : NamedExoticComponent<Props> = forwardRef<\n    HTMLDivElement, Props\n>(({ children, className, ...props }, ref ) => (\n    <div\n        role=\"paragraph\"\n        { ...props }\n        className={ `paragraph${ className ? ` ${ className }` : '' }` }\n        ref={ ref }\n    >\n        { Children.map( children, c => c ) }\n    </div>\n));\n\nParagraph.displayName = 'Paragraph';\n\nexport default Paragraph;"],"names":["_ref","className","React","style","color","Paragraph","Anchor","to","CodeBlock","Head","metadata","title","forwardRef","ref","children","props","Object","assign","role","Children","map","c","displayName"],"sourceRoot":""}