"use strict";(self.webpackChunkeagleeye_dev=self.webpackChunkeagleeye_dev||[]).push([[51],{93385:function(e,t,n){n.r(t);var l=n(96540),a=n(16040),c=n(4732);t.default=e=>{let{className:t}=e;return l.createElement("article",{className:`concept-client-page ${t}`},l.createElement("h1",null,"Client"),l.createElement("div",null,l.createElement("h3",null,"What is a client?"),l.createElement("div",null,l.createElement(c.A,null,"A client is any component consuming the observable context. A client consumes the context by:",l.createElement("ul",null,l.createElement("li",null,"either using the Eagle Eye ",l.createElement(a.A,{to:"/api#usecontext"},"useContext")," hook"),l.createElement("li",null,"or embedding itself within the connector returned by the Eagle Eye ",l.createElement(a.A,{to:"/api#connect"},"connect")," function"))),l.createElement(c.A,null,"Please see examples respectively in:",l.createElement("ol",null,l.createElement("li",null,l.createElement(a.A,{to:"/getting-started#usecontext-usage"},"Consuming context ","(","hook with memo method",")")),l.createElement("li",null,l.createElement(a.A,{to:"/getting-started#connect-usage"},"Consuming context ","(","hoc method",")")))))))}},4732:function(e,t,n){n.d(t,{A:function(){return c}});var l=n(96540);const a=(0,l.forwardRef)(((e,t)=>{let{children:n,className:a,...c}=e;return l.createElement("div",Object.assign({role:"paragraph"},c,{className:"paragraph"+(a?` ${a}`:""),ref:t}),l.Children.map(n,(e=>e)))}));a.displayName="Paragraph";var c=a}}]);
//# sourceMappingURL=component---src-pages-concepts-client-index-tsx-fad2d1f94d19366aa3fe.js.map