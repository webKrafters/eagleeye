{"version":3,"file":"component---src-pages-concepts-selector-map-tsx-a6868a6ce4245c79ba5a.js","mappings":"oLA4EA,UA5BiEA,IAAA,IAAC,UAAEC,GAAWD,EAAA,OAC3EE,EAAAA,cAAA,WAASD,UAAa,6BAA6BA,KAC/CC,EAAAA,cAAA,UAAI,gBACJA,EAAAA,cAAA,UAAI,2BACJA,EAAAA,cAACC,EAAAA,EAAS,KAAC,qHACXD,EAAAA,cAACC,EAAAA,EAAS,KAACD,EAAAA,cAAA,SAAGA,EAAAA,cAAA,cAAQ,eAAYA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,2BAA0B,kBAAuB,wBAA6B,6CAC3HH,EAAAA,cAAA,OAAKI,MAAO,CAAEC,YAAa,WACvBL,EAAAA,cAACM,EAAAA,EAAQ,KACLN,EAAAA,cAACC,EAAAA,EAAS,KACND,EAAAA,cAAA,YAAM,OAAU,0EAAuEA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,mBAAkBH,EAAAA,cAAA,YAAM,eAA0B,MAG5JA,EAAAA,cAACM,EAAAA,EAAQ,KACLN,EAAAA,cAACC,EAAAA,EAAS,KACND,EAAAA,cAAA,YAAM,SAAY,kBAAeA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,2BAA0B,iBAAsB,kFAA+EH,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,mBAAkBH,EAAAA,cAAA,YAAM,eAA0B,eAGhPA,EAAAA,cAACM,EAAAA,EAAQ,KACLN,EAAAA,cAACC,EAAAA,EAAS,KAAC,cACID,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,iDAAgD,WAAgB,sEAIlGH,EAAAA,cAAA,MAAIO,GAAG,wBAAuB,YAC9BP,EAAAA,cAACQ,EAAAA,EAAS,KAhEjB,86BAiEa,C,uECrEd,MAAMC,EAAeX,IAAA,IAAC,UAAEC,GAEvBD,EAAA,MACI,aAAYC,EAAa,IAAIA,IAAe,GAAK,EAGhDO,EAAgDI,IAAmB,IAAlB,SAAEC,GAAUD,EAC/D,MAAME,GAAQC,EAAAA,EAAAA,UAAQ,SAAAC,EAAA,MAAO,CACzBf,UAAWU,EAAcE,EAASC,OAClCG,KAAyB,QAArBD,EAAEH,EAASC,MAAMG,YAAI,IAAAD,EAAAA,EAAI,WAChC,GAAG,CACAH,EAASC,MAAMb,UACfY,EAASC,MAAMG,OAEnB,OAAOC,EAAAA,EAAAA,cAAcL,EAAUC,EAAO,EAG1CN,EAASW,YAAc,WAEvB,O,sECfA,MAAMhB,GAA0CiB,EAAAA,EAAAA,aAE9C,CAAApB,EAAoCqB,KAAG,IAAtC,SAAER,EAAQ,UAAEZ,KAAca,GAAOd,EAAA,OAChCE,EAAAA,cAAA,MAAAoB,OAAAC,OAAA,CACIN,KAAK,aACAH,EAAK,CACVb,UAAa,aAAYA,EAAa,IAAIA,IAAe,IACzDoB,IAAMA,IAEJG,EAAAA,SAASC,IAAKZ,GAAUa,GAAKA,IAC7B,IAGVvB,EAAUgB,YAAc,YAExB,O","sources":["webpack://eagleeye-dev/./src/pages/concepts/selector-map.tsx","webpack://eagleeye-dev/./src/partials/list-item/component.tsx","webpack://eagleeye-dev/./src/partials/paragraph/component.tsx"],"sourcesContent":["import React from 'react';\n\nimport Anchor from '../../partials/anchor';\nimport CodeBlock from '../../partials/code-block';\nimport ListItem from '../../partials/list-item';\nimport Paragraph from '../../partials/paragraph';\n\nconst SAMPLE =\n`// Given the following state object:\nconst state = {\n    a: 1, b: 2, c: 3, d: {\n        e: 5,\n        f: [ 6, {\n            x: 7,\n            y: 8,\n            z: 9\n        } ]\n    }\n};\n\n/* --------------------------------------------- */\n/* a client observing the following selector map */\n/* --------------------------------------------- */\nconst selectorMap = {\n    all: '@@STATE',\n    myData: 'd',\n    secondFElement: 'd.f[1]'\n};\n\n// will receive the following store data\nstore.data = {\n    all: state,\n    myData: state.d,\n    secondFElement: state.d.f[1]\n};\n\n/* --------------------------------------------------- */\n/* a client observing the following property path list */\n/* --------------------------------------------------- */\nconst propertyPaths = [ '@@STATE', 'd', 'd.f[1]' ];\n\n// will receive the following store data\nstore.data = {\n    0: state,\n    1: state.d,\n    2: state.d.f[1]\n};`\n\nconst ConceptSelectorMapPage : React.FC<{className? : string}> = ({ className }) => (\n    <article className={ `concept-selector-map-page ${ className }` }>\n        <h1>Selector Map</h1>\n        <h3>What is a Selector Map?</h3>\n        <Paragraph>A selector map is an object holding key:value pairs used for defining parts of the state to observe and retrieve.</Paragraph>\n        <Paragraph><i><strong>An array of <Anchor to=\"/concepts/property-path\">property paths</Anchor> is also acceptable:</strong> indexes serve as keys for this purpose.</i></Paragraph>\n        <div style={{ paddingLeft: '2.5rem' }}>\n            <ListItem>\n                <Paragraph>\n                    <code>key</code> refers to an arbitrary name to be assigned to a given property in the <Anchor to=\"/concepts/store\"><code>store.data</code></Anchor>.\n                </Paragraph>\n            </ListItem>\n            <ListItem>\n                <Paragraph>\n                    <code>value</code> refers to the <Anchor to=\"/concepts/property-path\">property path</Anchor> leading to a state slice whose value will be assigned to and observed by this <Anchor to=\"/concepts/store\"><code>store.data</code></Anchor> property.\n                </Paragraph>\n            </ListItem>\n            <ListItem>\n                <Paragraph>\n                    A special '<Anchor to=\"/concepts/property-path#fullstate-selectorkey\">@@STATE</Anchor>' value may be used to access and observe the full state object.\n                </Paragraph>\n            </ListItem>\n        </div>\n        <h4 id=\"selector-map-example\">Example:</h4>\n        <CodeBlock>{ SAMPLE }</CodeBlock>\n    </article>\n);\n\nexport default ConceptSelectorMapPage;\n","import React, { cloneElement, useMemo } from 'react';\n\nimport './style.scss';\n\nconst getClassName = ({ className } : {\n    className? : string\n}) => (\n    `list-item${ className ? ` ${ className }` : '' }`\n);\n\nconst ListItem : React.FC<{children : JSX.Element}> = ({ children }) => {\n    const props = useMemo(() => ({\n        className: getClassName( children.props ),\n        role: children.props.role ?? 'listitem'\n    }), [\n        children.props.className,\n        children.props.role\n    ]);\n    return cloneElement( children, props );\n};\n\nListItem.displayName = 'ListItem';\n\nexport default ListItem;","import type { NamedExoticComponent } from 'react';\n\nimport React, { Children, forwardRef } from 'react';\n\nimport './style.scss';\n\nexport type Props = JSX.IntrinsicElements[ \"div\" ];\n\nconst Paragraph : NamedExoticComponent<Props> = forwardRef<\n    HTMLDivElement, Props\n>(({ children, className, ...props }, ref ) => (\n    <div\n        role=\"paragraph\"\n        { ...props }\n        className={ `paragraph${ className ? ` ${ className }` : '' }` }\n        ref={ ref }\n    >\n        { Children.map( children, c => c ) }\n    </div>\n));\n\nParagraph.displayName = 'Paragraph';\n\nexport default Paragraph;"],"names":["_ref","className","React","Paragraph","Anchor","to","style","paddingLeft","ListItem","id","CodeBlock","getClassName","_ref2","children","props","useMemo","_children$props$role","role","cloneElement","displayName","forwardRef","ref","Object","assign","Children","map","c"],"sourceRoot":""}