{"version":3,"file":"component---src-pages-getting-started-tsx-1a57ad2db58c479b8be5.js","mappings":"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","sources":["webpack://eagleeye-dev/./src/pages/getting-started.tsx","webpack://eagleeye-dev/./src/partials/pad/note/component.tsx","webpack://eagleeye-dev/./src/partials/paragraph/component.tsx","webpack://eagleeye-dev/./src/partials/segment-header/component.tsx"],"sourcesContent":["import type { HeadFC } from 'gatsby';\n\nimport React from 'react';\n\nimport Anchor from '../partials/anchor';\nimport CodeBlock from '../partials/code-block';\nimport Header from '../partials/segment-header';\nimport NotePad from '../partials/pad/note';\nimport Paragraph from '../partials/paragraph';\n\nconst creatorCode =\n`import { createContext } from '@webkrafters/react-observable-context';\nexport default createContext();`\n\nconst providerCode =\n`import React, { useEffect, useState } from 'react';\nimport ObservableContext from './context';\nimport Ui from './ui';\n\nconst createInitialState = c = ({\n    a: { b: { c, x: { y: { z: [ 2022 ] } } } }\n});\n\nconst ProviderDemo = ({ ageInMinutes: c = 0 }) => {\n    \n    const [ value, setValue ] = useState(() => createInitialState( c ));\n\n    useEffect(() => {\n        // similar to  \\`store.setState\\`, use the following to update\n        // only the changed slice of the context internal state.\n        // Please use the \\`Set State\\` link in the TOC for more details.\n        setValue({ a: { b: { c } } }); // OR\n        // setValue({ a: { b: { c: { '@@REPLACE': c } } } });\n        // Do not do the following: it will override the context internal state.\n        // setValue({ ...value, a: { ...value.a, b: { ...value.a.b, c } } });\n    }, [ c ]);\n\n    return (\n        <ObservableContext.Provider value={ value }>\n            <Ui />\n        </ObservableContext.Provider>\n    );\n};\nProviderDemo.displayName = 'ProviderDemo';\n\nexport default ProviderDemo;`\n\nconst connectorCode =\n`import React, { useCallback, useEffect } from 'react';\nimport { connect } from '@webkrafters/react-observable-context';\nimport ObservableContext from './context';\n\nexport const YearText = ({ data }) => ( <div>Year: { data.year }</div> );\n\nexport const YearInput = ({ data, resetState, setState }) => {\n    const onChange = useCallback( e => setState({\n        a: { b: { x: { y: { z: { 0: e.target.value } } } } }\n    }), [ setState ]);\n\n    useEffect(() => {\n        data.year > 2049 && resetState([ 'a.b.c' ]);\n    }, [ data.year ]);\n\n    return ( <div>Year: <input type=\"number\" onChange={ onChange } /></div> );\n};\n\nconst withConnector = connect( ObservablContext, { year: 'a.b.x.y.z[0]' } );\nconst Client1 = withConnector( YearText );\nconst Client2 = withConnector( YearInput );\n\nconst Ui = () => (\n    <div>\n        <Client1 />\n        <Client2 />\n    </div>\n);\n\nexport default Ui;`\n\nconst useContextCode =\n`import React, { memo, useCallback, useEffect } from 'react';\nimport { useContext } from '@webkrafters/react-observable-context';\nimport ObservableContext from './context';\n\nconst selectorMap = { year: 'a.b.x.y.z[0]' };\n\nconst Client1 = memo(() => { // memoize to prevent 'no-change' renders from the parent.\n    const { data } = useContext( ObservableContext, selectorMap );\n    return ( <div>Year: { data.year }</div> );\n});\n\nconst Client2 = memo(() => { // memoize to prevent 'no-change' renders from the parent.\n\n    const { data, setState, resetState } = useContext( ObservableContext, selectorMap );\n\n    const onChange = useCallback( e => setState({\n        a: { b: { x: { y: { z: { 0: e.target.value } } } } }\n    }), [ setState ]);\n\n    useEffect(() => {\n        data.year > 2049 && resetState([ 'a.b.c' ]);\n    }, [ data.year ]);\n\n    return ( <div>Year: <input type=\"number\" onChange={ onChange } /></div> );\n});\n\nconst Ui = () => (\n    <div>\n        <Client1 />\n        <Client2 />\n    </div>\n);\n\nexport default Ui;`\n\nconst setupCode =\n`import React, { useEffect, useState } from 'react';\nimport ProviderDemo from './provider-demo';\n\nconst MILLIS_PER_MINUTE = 6e4;\n\nlet numCreated = 0;\n\nconst App = () => {\n    const [ age, updateAge ] = useState( 0 );\n    const [ testNumber ] = useState( () => ++numCreated );\n\n    useEffect(() => {\n        const t = setTimeout(\n            () => updateAge( age => age + 1 ),\n            MILLIS_PER_MINUTE\n        ); \n        return () => clearTimeout( t );\n    }, [ age ]);\n\n    return (\n        <div>\n            <h2>App instance #: { testNumber }</H2>\n            <ProviderDemo ageInMinutes={ age } />\n        </div>\n    );\n}\nexport default App;`\n\nconst GettingStartedPage : React.FC<{className : string}> = ({ className }) => (\n    <article className={ `getting-started-page ${ className }` }>\n        <h1>Getting Started</h1>\n        <Paragraph className=\"snippet-intro\" id=\"install\">\n            Eagle Eye context and the React.Context API share a similar setup flow. Let us begin by installing the Eagle Eye context package.\n        </Paragraph>\n        <Paragraph className=\"snippet-box\">\n            <CodeBlock isInline>\n                npm install --save react-eagleeye\n            </CodeBlock>\n        </Paragraph>\n        <Paragraph className=\"snippet-intro\" id=\"create-context-usage\">\n            <h3>Creating the context store</h3>\n            To obtain a fresh context store, just call the parameterless <code>createContext()</code> function. \n        </Paragraph>\n        <Paragraph className=\"snippet-box\">\n            <Header>context.js</Header>\n            <CodeBlock>{ creatorCode }</CodeBlock>\n        </Paragraph>\n        <div className=\"snippet-intro\" id=\"provider-usage\">\n            <h3>Providing the context store</h3>\n            <Paragraph>Similar to the React.Context API, you can make the context store available to any section of the component tree by wrapping it in the context store's Provider.</Paragraph>\n            <Paragraph>Further readings on the Eagle Eye Context Provider could be found <Anchor to=\"/concepts/provider\">here</Anchor>.</Paragraph>\n        </div>\n        <Paragraph className=\"snippet-box\">\n            <Header>provider-demo.js</Header>\n            <CodeBlock>{ providerCode }</CodeBlock>\n        </Paragraph>\n        <div className=\"snippet-intro\" id=\"connect-usage\">\n            <h3>Consuming the context store</h3>\n            <Paragraph>There are two ways of consuming the Eagle Eye context store: The HOC method and the React Hook method.</Paragraph>\n            <Paragraph>Let's tackle the HOC method first. This method uses the <code>connect(...)</code> HOC function to wire up the context store to your consumer component.</Paragraph>\n            <Paragraph>It embodies the \"set-it-and-forget-it\" paradigm. Just set up a list of property paths to state slices to observe { '(' }see <Anchor to=\"/concepts/selector-map\">Selector Map</Anchor>{ ')' }. Context takes care of the rest.</Paragraph>\n            <Paragraph>The following is a sample of the HOC consumer method.</Paragraph>\n        </div>\n        <Paragraph className=\"snippet-box\">\n            <Header>ui.js</Header>\n            <CodeBlock>{ connectorCode }</CodeBlock>\n        </Paragraph>\n        <div className=\"snippet-intro\" id=\"usecontext-usage\">\n            <h3>Consuming the context store (React Hook method)</h3>\n            <Paragraph>The following shows how to consume the Eagle Eye context store through the hook method.</Paragraph>\n            <Paragraph>This method uses the <code>useContext(...)</code> function to expose the store to the consumer component.</Paragraph>\n            <Paragraph><NotePad>In addition to setting up a map of property paths to state slices to observe { '(' }see <Anchor to=\"/concepts/selector-map\">Selector Map</Anchor>{ ')' }, the consumer compoent may have to be wrapped in a <code>React.memo(...)</code> HOC to shield it from cascading rerenders from parent/anscestor components.</NotePad></Paragraph>\n        </div>\n        <Paragraph className=\"snippet-box\">\n            <Header>ui.js</Header>\n            <CodeBlock>{ useContextCode }</CodeBlock>\n        </Paragraph>\n        <Paragraph className=\"snippet-intro\">\n            Wiring up your Eagle Eye context to the rest of the application is identical to the React.Context API. The following is a contrived snippet to demonstrate.\n        </Paragraph>\n        <Paragraph className=\"snippet-box\">\n            <Header>app.js</Header>\n            <CodeBlock>{ setupCode }</CodeBlock>\n        </Paragraph>\n    </article>\n);\n\nexport default GettingStartedPage;\n\n\nexport const Head: HeadFC = () => ( <title>Getting Started</title> );\n","import React, { Children } from 'react';\n\nimport './style.scss';\n\nconst NotePad : React.FC<{children: React.ReactNode}> = ({ children }) => (\n    <p className=\"note-pad\">\n        <strong className=\"title\">Note:</strong>\n        { ' ' }\n        { Children.map( children, c => c ) }\n    </p>      \n);\n\nNotePad.displayName = 'NotePad';\n\nexport default NotePad;\n\n","import type { NamedExoticComponent } from 'react';\n\nimport React, { Children, forwardRef } from 'react';\n\nimport './style.scss';\n\nexport type Props = JSX.IntrinsicElements[ \"div\" ];\n\nconst Paragraph : NamedExoticComponent<Props> = forwardRef<\n    HTMLDivElement, Props\n>(({ children, className, ...props }, ref ) => (\n    <div\n        role=\"paragraph\"\n        { ...props }\n        className={ `paragraph${ className ? ` ${ className }` : '' }` }\n        ref={ ref }\n    >\n        { Children.map( children, c => c ) }\n    </div>\n));\n\nParagraph.displayName = 'Paragraph';\n\nexport default Paragraph;","import React from 'react';\n\nimport './style.scss';\n\nexport interface Props {\n    children : React.ReactNode,\n    id? : string\n};\n\nconst Header : React.FC<Props> = ({ children, ...props }) => (\n    <header { ...props } className=\"segment-header\">\n        { children }\n    </header>\n);\n\nHeader.displayName = 'SegmentHeader';\n\nexport default Header;"],"names":["_ref","className","React","Paragraph","id","CodeBlock","isInline","Header","Anchor","to","NotePad","Head","children","Children","map","c","displayName","forwardRef","ref","props","Object","assign","role"],"sourceRoot":""}