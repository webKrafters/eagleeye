{"version":3,"file":"component---src-pages-concepts-prehooks-tsx-ec2ebf235d7ce675ab3c.js","mappings":"yKAmDA,UA/B8DA,IAAA,IAAC,UAAEC,GAAWD,EAAA,OACxEE,EAAAA,cAAA,WAASD,UAAa,yBAAyBA,KAC3CC,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAI,sBACJA,EAAAA,cAAA,WAAK,uHACLA,EAAAA,cAAA,UAAI,iBACJA,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,WAAK,wLAAqLA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,sBAAqB,cAAmB,IAACH,EAAAA,cAAA,YAAM,YAAe,oBAC7QA,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,WAAK,qBAAkBA,EAAAA,cAAA,cAAQ,KAAU,iKAA8JA,EAAAA,cAAA,cAAQ,KAAU,mBAAgBA,EAAAA,cAAA,cAAQ,cAAmB,QAAKA,EAAAA,cAAA,cAAQ,YAAiB,oDAC5SA,EAAAA,cAACC,EAAAA,EAAQ,KAACD,EAAAA,cAAA,WAAK,0BAAuBA,EAAAA,cAAA,cAAQ,WAAgB,UAAS,IAAK,IAACA,EAAAA,cAAA,YAAM,QAAW,oBAAiBA,EAAAA,cAAA,YAAM,SAAY,iCAAgC,IAAK,4BAA2B,IAAK,sCAAqC,IAAK,qIAAkIA,EAAAA,cAAA,YAAM,cAAiB,aACzYA,EAAAA,cAAA,UAAI,+BACJA,EAAAA,cAAA,UACIA,EAAAA,cAAA,UACIA,EAAAA,cAACI,EAAAA,EAAS,CAACC,MAAO,CAAEC,OAAQ,iBACxBN,EAAAA,cAAA,SAAG,eACHA,EAAAA,cAAA,OAAKK,MAAO,CAAEC,OAAQ,aA5B7C,4LA+BeN,EAAAA,cAAA,UACIA,EAAAA,cAACI,EAAAA,EAAS,CAACC,MAAO,CAAEC,OAAQ,iBACxBN,EAAAA,cAAA,SAAG,aACHA,EAAAA,cAAA,OAAKK,MAAO,CAAEC,OAAQ,aAzB7C,qHA6BWN,EAAAA,cAAA,UAAI,mDACJA,EAAAA,cAAA,WAAK,oBAAiBA,EAAAA,cAACE,EAAAA,EAAM,CAACC,GAAG,sBAAqB,YAAiB,mBAErE,C,uEC5Cd,MAAMI,EAAeT,IAAA,IAAC,UAAEC,GAEvBD,EAAA,MACI,aAAYC,EAAa,IAAIA,IAAe,GAAK,EAGhDE,EAAgDO,IAAmB,IAAlB,SAAEC,GAAUD,EAC/D,MAAME,GAAQC,EAAAA,EAAAA,UAAQ,SAAAC,EAAA,MAAO,CACzBb,UAAWQ,EAAcE,EAASC,OAClCG,KAAyB,QAArBD,EAAEH,EAASC,MAAMG,YAAI,IAAAD,EAAAA,EAAI,WAChC,GAAG,CACAH,EAASC,MAAMX,UACfU,EAASC,MAAMG,OAEnB,OAAOC,EAAAA,EAAAA,cAAcL,EAAUC,EAAO,EAG1CT,EAASc,YAAc,WAEvB,O,sECfA,MAAMX,GAA0CY,EAAAA,EAAAA,aAE9C,CAAAlB,EAAoCmB,KAAG,IAAtC,SAAER,EAAQ,UAAEV,KAAcW,GAAOZ,EAAA,OAChCE,EAAAA,cAAA,MAAAkB,OAAAC,OAAA,CACIN,KAAK,aACAH,EAAK,CACVX,UAAa,aAAYA,EAAa,IAAIA,IAAe,IACzDkB,IAAMA,IAEJG,EAAAA,SAASC,IAAKZ,GAAUa,GAAKA,IAC7B,IAGVlB,EAAUW,YAAc,YAExB,O","sources":["webpack://eagleeye-dev/./src/pages/concepts/prehooks.tsx","webpack://eagleeye-dev/./src/partials/list-item/component.tsx","webpack://eagleeye-dev/./src/partials/paragraph/component.tsx"],"sourcesContent":["import React from 'react';\n\nimport Anchor from '../../partials/anchor';\nimport Paragraph from '../../partials/paragraph';\nimport ListItem from '../../partials/list-item';\n\nconst RESET_STATE_SAMPLE =\n`prehooks.resetState = (\n    resetData: PartialState<State>, // resetData holds nextUpdate data.\n    state: {\n        current: State,\n        original: State\n    }\n) => boolean;`;\n\nconst SET_STATE_SAMPLE =\n`prehooks.setState = (\n    newChanges: PartialState<State> // newChanges holds nextUpdate data.\n) => boolean;`;\n\nconst ConceptPrehooksPage : React.FC<{className? : string}> = ({ className }) => (\n    <article className={ `concept-prehooks-page ${ className }` }>\n        <h1>Prehooks</h1>\n        <div>\n            <h3>What are Prehooks?</h3>\n            <div>Prehooks are user functions which are invoked by the Eagle Eye context prior to executing context state operations.</div>\n            <h3>Why Prehooks?</h3>\n            <ListItem><div>Prehooks provide a central place for sanitizing, modifying, transforming, validating etc. all related incoming state updates. The context store obtains its prehooks via its context <Anchor to=\"/concepts/provider\">Provider's</Anchor> <code>prehooks</code> optional prop.</div></ListItem>\n            <ListItem><div>The context store <strong>2</strong> update operations each adhere to its own user-defined prehook when present. Otherwise, the update operation proceeds normally to completion. Thus, there are <strong>2</strong> prehooks named <strong>resetState</strong> and <strong>setState</strong> - after the store update methods they support.</div></ListItem>\n            <ListItem><div>Each prehook returns a <strong>boolean</strong> value { '(' } <code>true</code> to continue AND <code>false</code> to abort the update operation{ ')' }. The prehook may modify { '(' }i.e. sanitize, transform, transpose{ ')' } the argument to accurately reflect the intended update value. This is done by mutating part of the argument which holds the next <code>nextUpdate</code> values.</div></ListItem>\n            <h3>What do Prehooks look like?</h3>\n            <ol>\n                <li>\n                    <Paragraph style={{ margin: '0 0 5px 10px' }}>\n                        <b>resetState:</b> \n                        <pre style={{ margin: '10px 5px' }}>{ RESET_STATE_SAMPLE }</pre>\n                    </Paragraph>\n                </li>\n                <li>\n                    <Paragraph style={{ margin: '0 0 5px 10px' }}>\n                        <b>setState:</b> \n                        <pre style={{ margin: '10px 5px' }}>{ SET_STATE_SAMPLE }</pre>\n                    </Paragraph>\n                </li>\n            </ol>\n            <h3>How are Prehooks wired up to the context store?</h3>\n            <div>Please visit the <Anchor to=\"/concepts/provider\">Provider</Anchor> concept page.</div>\n        </div>\n    </article>\n);\n\nexport default ConceptPrehooksPage;","import React, { cloneElement, useMemo } from 'react';\n\nimport './style.scss';\n\nconst getClassName = ({ className } : {\n    className? : string\n}) => (\n    `list-item${ className ? ` ${ className }` : '' }`\n);\n\nconst ListItem : React.FC<{children : JSX.Element}> = ({ children }) => {\n    const props = useMemo(() => ({\n        className: getClassName( children.props ),\n        role: children.props.role ?? 'listitem'\n    }), [\n        children.props.className,\n        children.props.role\n    ]);\n    return cloneElement( children, props );\n};\n\nListItem.displayName = 'ListItem';\n\nexport default ListItem;","import type { NamedExoticComponent } from 'react';\n\nimport React, { Children, forwardRef } from 'react';\n\nimport './style.scss';\n\nexport type Props = JSX.IntrinsicElements[ \"div\" ];\n\nconst Paragraph : NamedExoticComponent<Props> = forwardRef<\n    HTMLDivElement, Props\n>(({ children, className, ...props }, ref ) => (\n    <div\n        role=\"paragraph\"\n        { ...props }\n        className={ `paragraph${ className ? ` ${ className }` : '' }` }\n        ref={ ref }\n    >\n        { Children.map( children, c => c ) }\n    </div>\n));\n\nParagraph.displayName = 'Paragraph';\n\nexport default Paragraph;"],"names":["_ref","className","React","ListItem","Anchor","to","Paragraph","style","margin","getClassName","_ref2","children","props","useMemo","_children$props$role","role","cloneElement","displayName","forwardRef","ref","Object","assign","Children","map","c"],"sourceRoot":""}