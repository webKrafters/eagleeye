{"version":3,"file":"react-syntax-highlighter_languages_refractor_tsx-b1039fc4e9ed1387782f.js","mappings":"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","sources":["webpack://eagleeye-dev/./node_modules/refractor/lang/jsx.js","webpack://eagleeye-dev/./node_modules/refractor/lang/tsx.js","webpack://eagleeye-dev/./node_modules/refractor/lang/typescript.js"],"sourcesContent":["'use strict'\n\nmodule.exports = jsx\njsx.displayName = 'jsx'\njsx.aliases = []\nfunction jsx(Prism) {\n  ;(function (Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript)\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source\n    /**\n     * @param {string} source\n     * @param {string} [flags]\n     */\n    function re(source, flags) {\n      source = source\n        .replace(/<S>/g, function () {\n          return space\n        })\n        .replace(/<BRACES>/g, function () {\n          return braces\n        })\n        .replace(/<SPREAD>/g, function () {\n          return spread\n        })\n      return RegExp(source, flags)\n    }\n    spread = re(spread).source\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript)\n    Prism.languages.jsx.tag.pattern = re(\n      /<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/\n        .source\n    )\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/\n    Prism.languages.jsx.tag.inside['attr-value'].pattern =\n      /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/\n    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] =\n      /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\n    Prism.languages.jsx.tag.inside['comment'] = javascript['comment']\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-name',\n      {\n        spread: {\n          pattern: re(/<SPREAD>/.source),\n          inside: Prism.languages.jsx\n        }\n      },\n      Prism.languages.jsx.tag\n    )\n    Prism.languages.insertBefore(\n      'inside',\n      'special-attr',\n      {\n        script: {\n          // Allow for two levels of nesting\n          pattern: re(/=<BRACES>/.source),\n          alias: 'language-javascript',\n          inside: {\n            'script-punctuation': {\n              pattern: /^=(?=\\{)/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.jsx\n          }\n        }\n      },\n      Prism.languages.jsx.tag\n    ) // The following will handle plain text inside tags\n    var stringifyToken = function (token) {\n      if (!token) {\n        return ''\n      }\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function (tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{'\n          ) {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            tokens[i] = new Prism.Token(\n              'plain-text',\n              plainText,\n              null,\n              plainText\n            )\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJsx = require('./jsx.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = tsx\ntsx.displayName = 'tsx'\ntsx.aliases = []\nfunction tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx['parameter']\n    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n"],"names":["jsx","Prism","javascript","util","clone","languages","space","source","braces","spread","re","flags","replace","RegExp","extend","tag","pattern","inside","insertBefore","script","alias","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","Token","hooks","add","env","language","module","exports","displayName","aliases","refractorJsx","refractorTypescript","tsx","register","typescript","lookbehind","greedy","builtin","keyword","typeInside","decorator","at","function","generic","ts"],"sourceRoot":""}